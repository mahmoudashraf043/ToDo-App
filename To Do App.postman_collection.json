{
	"info": {
		"_postman_id": "a6578575-f282-4093-a87c-7a29bc238b89",
		"name": "To Do App",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15719948"
	},
	"item": [
		{
			"name": "Register",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"ahmed1\",\r\n    \"password\" : \"1111111111\",\r\n    \"firstName\": \"ahmed\",\r\n    \"lastName\" : \"ashraf\",\r\n    \"email\"  : \"ahmedashraf1@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/Register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"Register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Log in",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200 && pm.response.text()) {\r",
							"    try {\r",
							"        let json = pm.response.json();\r",
							"        if (json.token) {\r",
							"            pm.environment.set(\"jwt\", json.token);\r",
							"        } else {\r",
							"            console.warn(\"Token not found in response:\", json);\r",
							"        }\r",
							"    } catch (err) {\r",
							"        console.error(\"Error parsing JSON:\", err);\r",
							"    }\r",
							"} else {\r",
							"    console.warn(\"No response body or non-200 response\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"mahmoud044\",\r\n    \"password\" : \"123123123123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "update-user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\"  : \"ahmed111@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/user/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						""
					]
				},
				"description": "\n## Update User Information\n\nThis endpoint allows you to update user information for a specific user. It requires the user to be authenticated, and the request must include a valid authorization token.\n\n### Request\n\n- **Method:** PUT\n- **URL:** `http://localhost:8080/user/`\n- **Headers:**\n  - `Authorization`: Bearer token (set to `Bearer {{authToken}}` to use the token saved in the environment variable)\n\n### Request Body\n\nThe request body must be in JSON format and include the following parameters:\n\n- `username` (string): The username of the user.\n- `password` (string): The password for the user account.\n- `firstName` (string): The first name of the user.\n- `lastName` (string): The last name of the user.\n- `email` (string): The email address of the user.\n\n### Response\n\n- **Status Code:** 403\n- **Content-Type:** text/xml\n\nA 403 status code indicates that the request was understood by the server, but the server is refusing to fulfill it. This may be due to insufficient permissions or an invalid token.\n\n### Notes\n\nEnsure that you have a valid authorization token when making this request, as it is necessary for updating user information.\n"
			},
			"response": []
		},
		{
			"name": "get-log-in-user",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8080/user/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "delete-user",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8080/user/:username?username=mahmoud042",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						":username"
					],
					"query": [
						{
							"key": "username",
							"value": "mahmoud042"
						}
					],
					"variable": [
						{
							"key": "username",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "change-password",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"oldPassword\" : \"1234567899\",\r\n    \"newPassword\" : \"123123123123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/user/change-password",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"change-password"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create-task",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"getup\",\r\n    \"description\":\"get up from bed\",\r\n    \"dueDate\":\"2025-07-08\",\r\n    \"Completed\":\"false\",\r\n    \"userId\":\"1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/task/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"task",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-Task-ById",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/task/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"task",
						"1"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update-Task",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"hello get up\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/task/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"task",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete-Task",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/task/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"task",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_All_completed_tasks",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Get_All_uncompleted_tasks",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Get_Notification",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let token = pm.environment.get(\"jwt\");\r",
					"\r",
					"if (token) {\r",
					"    pm.request.headers.upsert({\r",
					"        key: \"Authorization\",\r",
					"        value: `Bearer ${token}`\r",
					"    });\r",
					"    console.log(\"✅ Authorization header added:\", `Bearer ${token}`);\r",
					"} else {\r",
					"    console.warn(\"❌ JWT not found in environment\");\r",
					"}\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}